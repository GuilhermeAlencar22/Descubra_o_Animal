#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <time.h>
#include <unistd.h>

typedef struct Node {
    char nome[50];
    char dicas[4][50];
    int dificuldade;
    struct Node *prox;
} Node;

Node* criarAnimalNode(char nome[50], char dicas[4][50], int dificuldade) {
    Node *novoAnimal = (Node*)malloc(sizeof(Node));
    strcpy(novoAnimal->nome, nome);
    for (int i = 0; i < 4; i++) {
        strcpy(novoAnimal->dicas[i], dicas[i]);
    }
    novoAnimal->dificuldade = dificuldade;
    novoAnimal->prox = NULL;
    return novoAnimal;
}

void adicionarAnimalOrdenado(Node **head, char nome[50], char dicas[4][50], int dificuldade) {
    Node *novoAnimal = criarAnimalNode(nome, dicas, dificuldade);
    if (*head == NULL || strcasecmp((*head)->nome, nome) >= 0) {
        novoAnimal->prox = *head;
        *head = novoAnimal;
    } else {
        Node *atual = *head;
        while (atual->prox != NULL && strcasecmp(atual->prox->nome, nome) < 0) {
            atual = atual->prox;
        }
        novoAnimal->prox = atual->prox;
        atual->prox = novoAnimal;
    }
}

void liberarLista(Node *head) {
    while (head != NULL) {
        Node *temp = head;
        head = head->prox;
        free(temp);
    }
}

Node* selecionarAnimalAleatorio(Node *head, int dificuldade) {
    int numAnimais = 0;
    Node *temp = head;
    while (temp != NULL) {
        if (temp->dificuldade == dificuldade) {
            numAnimais++;
        }
        temp = temp->prox;
    }

    if (numAnimais == 0) {
        return NULL;
    }

    int indice = rand() % numAnimais;
    int contagem = 0;
    temp = head;
    while (temp != NULL) {
        if (temp->dificuldade == dificuldade) {
            if (contagem == indice) {
                return temp;
            }
            contagem++;
        }
        temp = temp->prox;
    }

    return NULL;
}

Node* selecionarListaEcossistema(int opcaoEcossistema, Node *deserto, Node *oceano, Node *floresta, Node *neve, Node *montanha) {
    switch (opcaoEcossistema) {
        case 1: return deserto;
        case 2: return oceano;
        case 3: return floresta;
        case 4: return neve;
        case 5: return montanha;
        default: return NULL;
    }
}

int main() {
    srand(time(NULL));

    Node *deserto = NULL, *oceano = NULL, *floresta = NULL, *neve = NULL, *montanha = NULL;

    adicionarAnimalOrdenado(&deserto, "Camelo", (char [4][50]){"É um mamífero", "Seu pelo é marrom", "Tem duas corcovas", "Pode levar pessoas em cima dele"}, 0);
    adicionarAnimalOrdenado(&deserto, "Escorpiao", (char [4][50]){"É um inseto e aracnideo", "Possui veneno na sua cauda", "É pequeno e tem garras", "Vive em ambientes áridos"}, 0);
    adicionarAnimalOrdenado(&deserto, "Cobra", (char [4][50]){"É um réptil", "Tem presas na sua boca", "Rasteja pela areia", "Algumas têm um chocalho na cauda"}, 0);
    adicionarAnimalOrdenado(&deserto, "Urubu", (char [4][50]){"É um pássaro grande", "Seu nome é associado com impureza", "Personagem do PicaPau", "Tem uma cabeça calva"}, 1);
    
    adicionarAnimalOrdenado(&oceano, "Tartaruga", (char [4][50]){"Tem nadadeiras em forma de remos", "Tem um casco protetor", "Se encolhe para se proteger no casco", ""}, 0);
    adicionarAnimalOrdenado(&oceano, "Tubarao", (char [4][50]){"É um peixe grande", "Possui varias fileiras de dentes afiados", "É conhecido por ataques a surfistas e banhistas.", ""}, 0);
    adicionarAnimalOrdenado(&oceano, "Agua viva", (char [4][50]){"É um animal gelatinoso", "Tem tentáculos que podem picar", "Usa a corrente da agua para se mover e alimentar", "Principal fonte de alimento das Tartarugas"}, 0);
    adicionarAnimalOrdenado(&oceano, "Golfinho", (char [4][50]){"É um mamífero marinho", "Tem um nariz distintivo em forma de garrafa.", "É altamente inteligente e social", "Parente das Baleias"}, 1);
    adicionarAnimalOrdenado(&oceano, "Peixe palhaco", (char [4][50]){"É um peixe", "Ele convive em harmonia com a anemona(venenosa)", "Famoso pelo filme Procurando Nemo", "Peixe laranja e branco"}, 1);

    adicionarAnimalOrdenado(&floresta, "Onca", (char [4][50]){"É um felino", "É bastante famoso no Brasil", "Tem manchas escuras no pelo", "É excelente um nadador"}, 0);
    adicionarAnimalOrdenado(&floresta, "Arara", (char [4][50]){"É um passaro", "Esta na beira da extinção", "É protagonista no filme Rio", "Tem várias cores"}, 0);
    adicionarAnimalOrdenado(&floresta, "Macaco", (char [4][50]){"É um mamífero", "Possui cauda preênsil", "É altamente sociável", "Alimenta-se principalmente de frutas"}, 0);
    adicionarAnimalOrdenado(&floresta, "Tucano", (char [4][50]){"É uma ave", "Possui um bico longo e colorido", "Muito famoso na Amazônia", "Alimenta-se principalmente de frutas e insetos"}, 1);
    adicionarAnimalOrdenado(&floresta, "Tamandua", (char [4][50]){"É uma mamífero", "Tem uma lingua grande para comer sua presa", "Seu nariz é otimo em achar insetos", "Alimenta-se principalmente de formigas"}, 1);

    adicionarAnimalOrdenado(&neve, "Urso Polar", (char [4][50]){"É um mamífero carnívoro", "Tem uma camada de gordura para isolamento térmico", "Tem pelagem branca", "Vive nas regiões árticas"}, 0);
    adicionarAnimalOrdenado(&neve, "Lobo", (char [4][50]){"É um mamífero carnívoro", "Possui uma pelagem densa e branca", "Mascote da copa do mundo de 2018", "Vive em matilhas"}, 1);
    adicionarAnimalOrdenado(&neve, "Coelho", (char [4][50]){"É um mamífero herbívoro", "Tem pelagem branca no inverno", "Possui patas traseiras longas para saltar", "Caracterizado por seus dentes da frente longos"}, 0);
    adicionarAnimalOrdenado(&neve, "Coruja", (char [4][50]){"É uma ave de rapina", "Tem plumagem branca e densa", "Excelente visão noturna", "Sua cabeca pode girar até 270 graus"}, 0);
    
    adicionarAnimalOrdenado(&montanha, "Cabra", (char [4][50]){"É um mamífero herbivoro", "Tem um grande chifre", "Possui habilidades para escalar montanhas", "Substantivo feminino de bode"}, 1);
    adicionarAnimalOrdenado(&montanha, "Aguia", (char [4][50]){"É uma ave de rapina", "Possuem uma visão bastante eficiente", "contam com bicos fortes e garras afiadas", "Simbolo dos Estados Unidos"}, 0);
    adicionarAnimalOrdenado(&montanha, "Cobra", (char [4][50]){"É um réptil", "Tem presas na sua boca", "Rasteja pela areia", "Algumas têm um chocalho na cauda"}, 0);


    while (1) { // Loop para reiniciar o jogo
        char jogador1[50], jogador2[50];
        int pontosJogador1 = 0, pontosJogador2 = 0;
        char *jogadorAtual = jogador1;
        int *pontosAtual = &pontosJogador1;

        printf("Digite o nome do jogador 1: ");
        scanf("%49s", jogador1);
        printf("Digite o nome do jogador 2: ");
        scanf("%49s", jogador2);

        printf("\n--------------------------------\n");
        printf("Bem-vindo ao Descubra o Animal!\n");

        int opcaoEcossistema, dificuldade;
        char resposta[50];
        int tentativa, acertou = 0, turnos = 0;

        while (turnos < 2) { // Cada jogador joga uma vez antes de verificar o resultado
            printf("\nAgora é a vez de %s\n", jogadorAtual);

            printf("\nSelecione o ecossistema:\n");
            printf("1. Deserto\n2. Oceano\n3. Floresta\n4. Neve\n5. Montanha\n6. Sair\n");
            scanf("%d", &opcaoEcossistema);

            if (opcaoEcossistema == 6) {
                break; // Sair do jogo
            }

            Node *listaAnimaisEcossistema = selecionarListaEcossistema(opcaoEcossistema, deserto, oceano, floresta, neve, montanha);
            printf("\nSelecione a dificuldade:\n");
            printf("1. Fácil\n2. Difícil\n");
            scanf("%d", &dificuldade);
            dificuldade = dificuldade == 2 ? 1 : 0;

            Node *animalSelecionado = selecionarAnimalAleatorio(listaAnimaisEcossistema, dificuldade);
            if (animalSelecionado == NULL) {
                printf("Não há animais disponíveis para a dificuldade selecionada neste ecossistema.\n");
                continue;
            }

            printf("\nVamos lá! Adivinhe o animal...\n");
            tentativa = 0;
            acertou = 0;
            while (tentativa < 4 && animalSelecionado->dicas[tentativa][0] != '\0') {
                printf("Dica %d: %s\n", tentativa + 1, animalSelecionado->dicas[tentativa]);
                printf("Digite o nome do animal: ");
                scanf(" %49s", resposta);
                if (strcasecmp(resposta, animalSelecionado->nome) == 0) {
                    printf("\nParabéns! Você acertou! O animal é: %s\n", animalSelecionado->nome);
                    (*pontosAtual)++;
                    acertou = 1; // Correct answer, continue the turn
                    break;
                } else {
                    printf("Que pena! Você errou.\n");
                    if (tentativa == 3) {
                        printf("\nO animal era: %s\n", animalSelecionado->nome);
                    } else {
                        printf("\nPróxima dica:\n");
                    }
                }
                tentativa++;
            }
            if (!acertou || tentativa == 4) {
                printf("\n%s finalizou a rodada com %d pontos.\n", jogadorAtual, *pontosAtual);
                turnos++;
                if (jogadorAtual == jogador1) {
                    jogadorAtual = jogador2;
                    pontosAtual = &pontosJogador2;
                } else {
                    jogadorAtual = jogador1;
                    pontosAtual = &pontosJogador1;
                }
            }
        }

        if (opcaoEcossistema != 6) {
            printf("Placar final: %s %d x %d %s\n", jogador1, pontosJogador1, pontosJogador2, jogador2);
            if (pontosJogador1 > pontosJogador2) {
                printf("O vencedor é %s!\n", jogador1);
            } else if (pontosJogador2 > pontosJogador1) {
                printf("O vencedor é %s!\n", jogador2);
            } else {
                printf("Empate! O jogo será reiniciado.\n\n");
                continue; // Reinicia o jogo se for empate
            }

            printf("Deseja jogar novamente? (S/N): ");
            char choice;
            scanf(" %c", &choice);
            if (choice == 'N' || choice == 'n') {
                printf("Obrigado por jogar!\n");
                break;
            }
        }
    }

    liberarLista(deserto);
    liberarLista(oceano);
    liberarLista(floresta);
    liberarLista(neve);
    liberarLista(montanha);

    return 0;
}
